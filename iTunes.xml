<export><workspace name="iTunes"><query name="1. Create Database" focus="false" active="true" content-source="as:9259051684179991335:" mode="xquery">xquery version "1.0-ml"; 

import module namespace info = "http://marklogic.com/appservices/infostudio" at "/MarkLogic/appservices/infostudio/info.xqy";

info:database-create("iTunes", 2)</query><query name="2. Throw the Entire XML doc into MarkLogic" focus="false" active="true" content-source="5594643177622989378:0:Apps" mode="xquery">xquery version "1.0-ml";

xdmp:document-insert("/master.xml", xdmp:document-get("e:\iTunes Music Library.xml"))</query><query name="3. Load using Spawn Function" focus="false" active="true" content-source="5594643177622989378:0:Apps" mode="xquery">xquery version "1.0-ml";

(: Farms out data loading to the Task Server :)

for $i in doc("/master.xml")/plist/dict/dict/dict
let $id := xdmp:md5($i)

return
xdmp:spawn-function(function() {

xdmp:document-insert( ("/"||$id||".xml"),
element iTunes-item 
{
  element id {$id},
  for $j in $i/key
  return element {xs:QName(replace($j, " ", "-") )} {xs:string($j/following-sibling::*[1])}, 
  element original-iTunes-data {($i/preceding-sibling::*[1], $i)}
}
)},
    &lt;options xmlns="xdmp:eval"&gt;
        &lt;transaction-mode&gt;update-auto-commit&lt;/transaction-mode&gt;
        &lt;database&gt;{xdmp:database("iTunes")}&lt;/database&gt;
    &lt;/options&gt;
)
</query><query name="Query 1" focus="false" active="true" content-source="5594643177622989378:0:Apps" mode="xquery">xquery version "1.0-ml";

(: Example Data Element 

for $i in doc("/master.xml")/plist/dict/dict/dict[1 to 10]
let $id := xdmp:md5($i)
return
element iTunes-item 
{
  element id {$id},
  for $j in $i/key
  return element {xs:QName(replace($j, " ", "-") )} {xs:string($j/following-sibling::*[1])}, 
  element original-iTunes-data {($i/preceding-sibling::*[1], $i)}
} :)</query><query name="Rudimentary Searches" focus="true" active="true" content-source="5594643177622989378:0:Apps" mode="xquery">xquery version "1.0-ml";

(:
xdmp:estimate(
  cts:search(
    doc(),
    cts:element-value-query(xs:QName("Year"), "2013")
  )
) :)

(:
for $i in
  cts:search(
    doc(),
    cts:element-value-query(xs:QName("Year"), "2015")
  )
return $i/iTunes-item/Artist
:)

for $i in 
cts:search(
    doc()/iTunes-item,
      cts:element-value-query(xs:QName("Artist"), "Songhoy Blues")
)
return $i</query><query name="Get Additional Data from MusicBrainz" focus="false" active="true" content-source="5594643177622989378:0:Apps" mode="xquery">xquery version "1.0-ml";

(: Ask MusicBrainz :)

xdmp:http-get(
   "http://musicbrainz.org/ws/2/artist/?query=artist:Portishead",
 
 &lt;options xmlns="xdmp:http"&gt;
    &lt;headers&gt;
      &lt;User-Agent&gt;{"MyTestApplicationv1"}&lt;/User-Agent&gt;
    &lt;/headers&gt;
   &lt;/options&gt;)
 (:
 http://musicbrainz.org/ws/2/search/Portishead
 &lt;options xmlns="xdmp:http-get"&gt;
     &lt;format xmlns="xdmp:document-get"&gt;xml&lt;/format&gt;
  &lt;/options&gt;
)
:)</query></workspace></export>
