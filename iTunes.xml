<export><workspace name="iTunes"><query name="1. Create Database" focus="false" active="true" content-source="7493747543407369019:0:Apps" mode="xquery">xquery version "1.0-ml"; 

import module namespace info = "http://marklogic.com/appservices/infostudio" at "/MarkLogic/appservices/infostudio/info.xqy";

info:database-create("iTunes", 2)</query><query name="2. Throw the Entire XML doc into MarkLogic" focus="false" active="true" content-source="7493747543407369019:0:Apps" mode="xquery">xquery version "1.0-ml";

xdmp:document-insert("/master.xml", xdmp:document-get("/Users/ableasdale/Documents/workspace/ml-itunes/iTunes Music Library.xml"))</query><query name="3. Load using Spawn Function" focus="false" active="true" content-source="7493747543407369019:0:Apps" mode="xquery">xquery version "1.0-ml";

(: Farms out data loading to the Task Server :)

for $i in doc("/master.xml")/plist/dict/dict/dict
let $id := xdmp:md5($i)

return
xdmp:spawn-function(function() {

xdmp:document-insert( ("/"||$id||".xml"),
element iTunes-item 
{
  element id {$id},
  for $j in $i/key
  return element {xs:QName(replace($j, " ", "-") )} {xs:string($j/following-sibling::*[1])}, 
  element original-iTunes-data {($i/preceding-sibling::*[1], $i)}
}
)},
    &lt;options xmlns="xdmp:eval"&gt;
        &lt;transaction-mode&gt;update-auto-commit&lt;/transaction-mode&gt;
        &lt;database&gt;{xdmp:database("iTunes")}&lt;/database&gt;
    &lt;/options&gt;
)
</query><query name="Query 1" focus="false" active="true" content-source="5594643177622989378:0:Apps" mode="xquery">xquery version "1.0-ml";

(: Example Data Element 

for $i in doc("/master.xml")/plist/dict/dict/dict[1 to 10]
let $id := xdmp:md5($i)
return
element iTunes-item 
{
  element id {$id},
  for $j in $i/key
  return element {xs:QName(replace($j, " ", "-") )} {xs:string($j/following-sibling::*[1])}, 
  element original-iTunes-data {($i/preceding-sibling::*[1], $i)}
} :)</query><query name="Rudimentary Searches" focus="false" active="true" content-source="as:7653802559119570711:" mode="xquery">xquery version "1.0-ml";

(:
xdmp:estimate(
  cts:search(
    doc(),
    cts:element-value-query(xs:QName("Year"), "2013")
  )
) :)

(:
for $i in
  cts:search(
    doc(),
    cts:element-value-query(xs:QName("Year"), "2015")
  )
return $i/iTunes-item/Artist
:)

(:
for $i in 
cts:search(
    doc()/iTunes-item,
      cts:element-value-query(xs:QName("Artist"), "Songhoy Blues")
)
return $i :)

</query><query name="Get Additional Data from MusicBrainz" focus="false" active="true" content-source="5594643177622989378:0:Apps" mode="xquery">xquery version "1.0-ml";

declare namespace mb = "http://musicbrainz.org/ns/mmd-2.0#";
(: Ask MusicBrainz :)

(:
xdmp:http-get(
   "http://musicbrainz.org/ws/2/artist/?query=artist:Air",
 
 &lt;options xmlns="xdmp:http"&gt;
    &lt;headers&gt;
      &lt;User-Agent&gt;{"MarkLogic iTunes v0.1"}&lt;/User-Agent&gt;
    &lt;/headers&gt;
   &lt;/options&gt;)[2]//mb:artist :)
 (:
 http://musicbrainz.org/ws/2/search/Portishead
 &lt;options xmlns="xdmp:http-get"&gt;
     &lt;format xmlns="xdmp:document-get"&gt;xml&lt;/format&gt;
  &lt;/options&gt;
)
 "http://musicbrainz.org/ws/2/title/?query=artist:Portishead&amp;amp;title=Dummy",
:)
xdmp:http-get(
  (: "http://musicbrainz.org/ws/2/freedb/?query=artist:Portishead&amp;amp;title=Dummy",:)
(:"http://musicbrainz.org/ws/2/freedb/?query=discid:660a820a", :)
(:"http://musicbrainz.org/ws/2/recording/?query=Dummy%20AND%20Portishead", :)
  
  (:"http://musicbrainz.org/ws/2/recording/?query=&amp;quot;Dummy&amp;quot;%20AND%20artist:Portishead",:)
  (: "http://musicbrainz.org/ws/2/freedb/?query=&amp;quot;Dummy&amp;quot;%20AND%20artist:Portishead", :)
 
    (: "http://musicbrainz.org/ws/2/release-group/48140466-cff6-3222-bd55-63c27e43190d", :)
(:
"http://musicbrainz.org/ws/2/artist/8f6bd1e4-fbe1-4f50-aa9b-94c450ec0f11", :)
(:"http://musicbrainz.org/ws/2/artist/8f6bd1e4-fbe1-4f50-aa9b-94c450ec0f11/releases", :)


(: This will get the id of an artist from search :)
(: https://beta.musicbrainz.org/ws/2/artist/?query=portishead
 8f6bd1e4-fbe1-4f50-aa9b-94c450ec0f11 :)
 
 (: when you have that, you can get all albums and EPs associated 
 "http://musicbrainz.org/ws/2/release-group?artist=8f6bd1e4-fbe1-4f50-aa9b-94c450ec0f11&amp;amp;type=album|ep",:)
 
 "http://musicbrainz.org/ws/2/release-group?artist=4dca4bb2-23ba-4103-97e6-5810311db33a&amp;amp;type=album|ep",
 
 &lt;options xmlns="xdmp:http"&gt;
    &lt;headers&gt;
      &lt;User-Agent&gt;{"MarkLogic iTunes v0.1"}&lt;/User-Agent&gt;
    &lt;/headers&gt;
   &lt;/options&gt;)[2]</query><query name="Query 2" focus="false" active="true" content-source="as:7653802559119570711:" mode="xquery">xquery version "1.0-ml";

(:
for $i in (//iTunes-item)[1 to 10]
order by $i/Track-ID
return $i :)


(:
fn:subsequence(
   (for $i in (//iTunes-item/Track-ID)
order by fn:number($i)
return $i/..),
   1,
   10
) :)

(:
cts:search(doc()/iTunes-item,
  cts:element-value-query(xs:QName("Artist"), "10,000 Maniacs")
)
:)
(:
cts:search(doc()/iTunes-item, :)
(: for $i in 
cts:search(
  doc()/iTunes-item,
  cts:element-value-query(xs:QName("Track-ID"), xs:string(cts:element-values(xs:QName("Track-ID"), (), ("limit=100") )))
)
return $i/Track-ID :)

for $i in cts:element-values(xs:QName("Track-ID"), (), ("limit=100"))
return doc()/iTunes-item/Track-ID[. eq $i]
  
   
  
  (:cts:element-query(xs:QName("ns1:contextElement") :)
</query><query name="Get Additional Data from Discogs" focus="false" active="true" content-source="5594643177622989378:0:Apps" mode="xquery">xquery version "1.0-ml";
 
 (: JSON ONLY :)
 
xdmp:http-get(
   "https://api.discogs.com/releases/249504?f=xml",
 
 &lt;options xmlns="xdmp:http"&gt;
    &lt;headers&gt;
      &lt;User-Agent&gt;{"MarkLogic iTunes v0.1"}&lt;/User-Agent&gt;
    &lt;/headers&gt;
   &lt;/options&gt;)[2]
</query><query name="Get Additional Data from Echonest" focus="false" active="true" content-source="as:7653802559119570711:" mode="xquery">xquery version "1.0-ml";

(: 
Echonest is now spotify and is JSON only...
https://developer.spotify.com/web-api/endpoint-reference/ :)</query><query name="Get Artists" focus="false" active="true" content-source="as:7653802559119570711:" mode="xquery">xquery version "1.0-ml";

count(cts:element-values(xs:QName("Artist"), (), ("limit=20000")))
(: return doc()/iTunes-item/Track-ID[. eq $i] :)</query><query name="Create MusicBrainz Artist Data Stubs" focus="false" active="true" content-source="as:7653802559119570711:" mode="xquery">xquery version "1.0-ml";

declare function local:create-uri($item as xs:string){
  ("/"||xdmp:url-encode($item, fn:true())||".xml")
};

declare function local:musicbrainz($artist as xs:string){
	xdmp:http-get(
   "http://musicbrainz.org/ws/2/artist/?query=artist:"||xdmp:url-encode($artist,fn:true()),
 &lt;options xmlns="xdmp:http"&gt;
    &lt;headers&gt;
      &lt;User-Agent&gt;{"MarkLogic iTunes v0.1"}&lt;/User-Agent&gt;
    &lt;/headers&gt;
   &lt;/options&gt;)
};

declare function local:has-meta($item as xs:string) as xs:boolean {
  fn:local-name(fn:doc(local:create-uri($item))/node()) eq "ArtistData"
};

for $i in cts:element-values(xs:QName("Artist"), (), ("limit=2000"))
return if(local:has-meta($i))
then(xdmp:log("Skipping: " || $i))
else

xdmp:spawn-function(function() {
(: arbitrary sleep so I don't get blocked! :)
let $_ := xdmp:sleep(xdmp:random(2000))
return
let $response := xdmp:http-get( (: https://beta.musicbrainz.org  http://musicbrainz.org :)
   "http://musicbrainz.org/ws/2/artist/?query=artist:"||xdmp:url-encode($i,fn:true()),
 &lt;options xmlns="xdmp:http"&gt;
    &lt;headers&gt;
      &lt;User-Agent&gt;{"MarkLogic iTunes/0.1 (rhodlite78@yahoo.co.uk)"}&lt;/User-Agent&gt;
    &lt;/headers&gt;
   &lt;/options&gt;)
return (
xdmp:log($response),  
xdmp:document-insert( ("/"||xdmp:url-encode($i, fn:true())||".xml"), element ArtistData {
    $response[2]
}))	

},
    &lt;options xmlns="xdmp:eval"&gt;
        &lt;transaction-mode&gt;update-auto-commit&lt;/transaction-mode&gt;
        &lt;database&gt;{xdmp:database("iTunes")}&lt;/database&gt;
    &lt;/options&gt;
) </query><query name="Query 3" focus="false" active="false" content-source="as:7653802559119570711:" mode="xquery">xquery version "1.0-ml";

xdmp:estimate(//ArtistData)</query><query name="LastFM Data Stubs" focus="false" active="true" content-source="as:7653802559119570711:" mode="xquery">xquery version "1.0-ml";

declare variable $LFM-URI-KEY as xs:string := "xxx";
declare variable $LFM-ROOT-ELEMENT as xs:string := "LastFMArtistData";


declare function local:create-uri($item as xs:string){
  ("/lfm/"||xdmp:url-encode($item, fn:true())||".xml")
};

declare function local:has-meta($item as xs:string) as xs:boolean {
  fn:local-name(fn:doc(local:create-uri($item))/node()) eq $LFM-ROOT-ELEMENT
};

for $i in cts:element-values(xs:QName("Artist"), (), ("limit=25000"))
return if(local:has-meta($i))
then(xdmp:log("Skipping: " || $i))
else

xdmp:spawn-function(function() {
let $response := xdmp:http-get( 
	"http://ws.audioscrobbler.com/2.0/?method=artist.getinfo&amp;amp;artist="||xdmp:url-encode($i,fn:true())||"&amp;amp;api_key="||$LFM-URI-KEY,
 &lt;options xmlns="xdmp:http"&gt;
    &lt;headers&gt;
      &lt;User-Agent&gt;{"MarkLogic iTunes/0.1"}&lt;/User-Agent&gt;
    &lt;/headers&gt;
   &lt;/options&gt;)
return (
xdmp:log($response),  
xdmp:document-insert( local:create-uri($i), element {xs:QName($LFM-ROOT-ELEMENT)} {
    $response[2]
}))	

},
    &lt;options xmlns="xdmp:eval"&gt;
        &lt;transaction-mode&gt;update-auto-commit&lt;/transaction-mode&gt;
        &lt;database&gt;{xdmp:database("iTunes")}&lt;/database&gt;
    &lt;/options&gt;
) 
</query><query name="Gracenote API" focus="true" active="true" content-source="as:7653802559119570711:" mode="xquery">xquery version "1.0-ml";

declare variable $payload := xdmp:quote(
&lt;QUERIES&gt;
  &lt;LANG&gt;eng&lt;/LANG&gt;
  &lt;AUTH&gt;
    &lt;CLIENT&gt;xxx&lt;/CLIENT&gt;
    &lt;USER&gt;yyy&lt;/USER&gt;
  &lt;/AUTH&gt;
  &lt;QUERY CMD="ALBUM_SEARCH"&gt;
    &lt;TEXT TYPE="ARTIST"&gt;flying lotus&lt;/TEXT&gt;
    &lt;TEXT TYPE="ALBUM_TITLE"&gt;until the quiet comes&lt;/TEXT&gt;
    &lt;!-- for 1 track do: TEXT TYPE="TRACK_TITLE"&gt;all in&lt;/TEXT--&gt;
      &lt;OPTION&gt;
      &lt;PARAMETER&gt;SELECT_EXTENDED&lt;/PARAMETER&gt;
      &lt;VALUE&gt;COVER,REVIEW,ARTIST_BIOGRAPHY,ARTIST_IMAGE,ARTIST_OET,MOOD,TEMPO&lt;/VALUE&gt;
    &lt;/OPTION&gt;
    &lt;OPTION&gt;
      &lt;PARAMETER&gt;SELECT_DETAIL&lt;/PARAMETER&gt;
      &lt;VALUE&gt;GENRE:3LEVEL,MOOD:2LEVEL,TEMPO:3LEVEL,ARTIST_ORIGIN:4LEVEL,ARTIST_ERA:2LEVEL,ARTIST_TYPE:2LEVEL&lt;/VALUE&gt;
    &lt;/OPTION&gt;
  &lt;/QUERY&gt;
&lt;/QUERIES&gt;

);


xdmp:http-post(
   "https://cxxx.web.cddbp.net/webapi/xml/1.0/",
&lt;options xmlns="xdmp:http"&gt;
       &lt;data&gt;{$payload}&lt;/data&gt;
       &lt;headers&gt;
         &lt;content-type&gt;application/xml&lt;/content-type&gt;
       &lt;/headers&gt;
        &lt;verify-cert&gt;false&lt;/verify-cert&gt;
     &lt;/options&gt;) 
 </query></workspace></export>
